{
    "openapi": "3.0.0",
    "info": {
        "title": "L5 OpenApi",
        "description": "L5 Swagger OpenApi description",
        "contact": {
            "email": "darius@matulionis.lt"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0",
        "x-logo": {
            "url": "https://via.placeholder.com/190x90.png?text=L5-Swagger"
        }
    },
    "servers": [
        {
            "url": "http://localhost:8000/api/v1",
            "description": "Demo API Server"
        }
    ],
    "paths": {
        "/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Sign in",
                "description": "Login by email, password",
                "operationId": "authLogin",
                "requestBody": {
                    "description": "Pass user credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User login successfully."
                                        },
                                        "payload": {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "Sanctum token"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "User Name"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Wrong credentials response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login failed"
                                        },
                                        "payload": {
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "example": "Invalid credentials"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/event": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "get event",
                "description": "get all event with paginate",
                "operationId": "getListEvents",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "limit pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "request success"
                                        },
                                        "payload": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": "1"
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Event"
                                                    }
                                                },
                                                "first_page_url": {
                                                    "type": "string",
                                                    "example": "http://localhost:8000/api/v1/event?page=1"
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": "1"
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": "1"
                                                },
                                                "last_page_url": {
                                                    "type": "integer",
                                                    "example": "http://localhost:8000/api/v1/event?page=1"
                                                },
                                                "links": {
                                                    "type": "string",
                                                    "example": "Invalid credentials"
                                                },
                                                "next_page_url": {
                                                    "type": "string",
                                                    "example": "null"
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "example": "http://localhost:8000/api/v1/event"
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": "10"
                                                },
                                                "prev_page_url": {
                                                    "type": "string",
                                                    "example": "null"
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": "10"
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": "1-"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Store new event",
                "description": "Returns event data",
                "operationId": "storeEvent",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreEventRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "request success"
                                        },
                                        "payload": {
                                            "$ref": "#/components/schemas/Event"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation errors"
                                        },
                                        "payload": {
                                            "properties": {
                                                "name": {
                                                    "type": "array",
                                                    "items": {
                                                        "example": "The name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/event/{id}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get event information",
                "description": "Returns event data",
                "operationId": "getEventById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "event id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "request success"
                                        },
                                        "payload": {
                                            "$ref": "#/components/schemas/Event"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Update existing Event",
                "description": "Returns updated Event data",
                "operationId": "updateEvent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateEventRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "request success"
                                        },
                                        "payload": {
                                            "$ref": "#/components/schemas/Event"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation errors"
                                        },
                                        "payload": {
                                            "properties": {
                                                "name": {
                                                    "type": "array",
                                                    "items": {
                                                        "example": "The name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Delete existing Event",
                "description": "Deletes a record and returns content that deleted",
                "operationId": "deleteEvent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "true"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "request success"
                                        },
                                        "payload": {
                                            "$ref": "#/components/schemas/Event"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Event": {
                "title": "Event",
                "description": "Event model",
                "properties": {
                    "id": {
                        "title": "id",
                        "description": "event ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of event",
                        "type": "string",
                        "example": "Open Mic"
                    },
                    "date": {
                        "title": "Date",
                        "description": "Date of event",
                        "example": "2022-03-05"
                    },
                    "time": {
                        "title": "event time",
                        "description": "event time",
                        "type": "string",
                        "format": "time",
                        "example": "12:00:00"
                    },
                    "location": {
                        "title": "event location",
                        "description": "event location",
                        "type": "string",
                        "example": "Yogyakarta, Indonesia"
                    },
                    "created_at": {
                        "title": "created at",
                        "description": "created at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2022-03-05T10:45:04.000000Z"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Updated at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2022-03-05T10:45:04.000000Z"
                    },
                    "deleted_at": {
                        "title": "Deleted at",
                        "description": "Deleted at",
                        "type": "string",
                        "format": "datetime",
                        "example": "null"
                    },
                    "created_by": {
                        "title": "Author ID",
                        "description": "Author's id of the new project",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Event"
                }
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name",
                        "type": "string"
                    },
                    "email": {
                        "title": "Email",
                        "description": "Email",
                        "type": "string",
                        "format": "email"
                    },
                    "email_verified_at": {
                        "title": "Email verified at",
                        "description": "Email verified at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Created at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Updated at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "deleted_at": {
                        "title": "Deleted at",
                        "description": "Deleted at",
                        "type": "string",
                        "format": "datetime",
                        "example": "null"
                    }
                },
                "type": "object"
            },
            "EventResource": {
                "title": "EventResource",
                "description": "Event resource",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "Data wrapper",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Event"
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "EventResource"
                }
            },
            "StoreEventRequest": {
                "title": "Store Event request",
                "description": "Store Event request body data",
                "required": [
                    "name",
                    "date",
                    "time",
                    "location"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new event",
                        "type": "string",
                        "example": "Open Mic"
                    },
                    "date": {
                        "title": "date",
                        "description": "Date of the new event",
                        "example": "2022-03-05"
                    },
                    "time": {
                        "title": "time",
                        "description": "Time of the new event with h:m:s",
                        "format": "time",
                        "example": "00:00:00"
                    },
                    "location": {
                        "title": "location",
                        "description": "location of the new event",
                        "type": "string",
                        "example": "Yogyakarta, Indonesia"
                    }
                },
                "type": "object"
            },
            "UpdateEventRequest": {
                "title": "Update Event request",
                "description": "Update Event request body data",
                "required": [
                    "name",
                    "date",
                    "time",
                    "location"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new event",
                        "type": "string",
                        "example": "Open Mic"
                    },
                    "date": {
                        "title": "date",
                        "description": "Date of the new event",
                        "example": "2022-03-05"
                    },
                    "time": {
                        "title": "time",
                        "description": "Time of the new event with h:m:s",
                        "format": "time",
                        "example": "00:00:00"
                    },
                    "location": {
                        "title": "location",
                        "description": "location of the new event",
                        "type": "string",
                        "example": "Yogyakarta, Indonesia"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "name": "bearerAuth",
                "in": "header",
                "bearerFormat": "JWT",
                "scheme": "Bearer"
            }
        }
    },
    "security": [
        []
    ]
}